---
import { Picture } from 'astro:assets'
import blurHashImage from './blur'
import { getImage } from '../getImage'

import { HTMLAttributes } from 'astro/types'
import { ImageMetadata, ImageInputFormat } from 'astro'

type Props = {
    src: string | ImageMetadata
    blurhashWidth?: number
    width?: number
    height?: number
    widths?: number[]
    sizes?: string
    alt: string
    decoding?: HTMLAttributes<'img'>['decoding']
    loading?: HTMLAttributes<'img'>['loading']
    formats?: ImageInputFormat[]
    fallbackFormat?: ImageInputFormat
    class?: HTMLAttributes<'picture'>['class']
    pictureAttributes?: HTMLAttributes<'picture'>
    deriveAspectRatio?: boolean
}

const {
    src: baseSrc,
    blurhashWidth = 20,
    width,
    height,
    widths = [900, 1400, 2000],
    sizes,
    alt,
    decoding = 'async',
    loading,
    formats = ['avif'],
    fallbackFormat = 'webp',
    class: className,
    pictureAttributes,
    deriveAspectRatio = true,
} = Astro.props

const src = typeof baseSrc === 'string' ? await getImage(baseSrc) : baseSrc

const aspectRatioStyle = `aspect-ratio: ${src.width / src.height};`
const backgroundStyle = await blurHashImage(src.src, blurhashWidth)
const style = deriveAspectRatio ? `${aspectRatioStyle} ${backgroundStyle}` : backgroundStyle
---

<Picture
    src={src}
    width={width}
    height={height}
    widths={widths}
    sizes={sizes}
    alt={alt}
    decoding={decoding}
    loading={loading}
    formats={formats}
    fallbackFormat={fallbackFormat}
    class={className}
    pictureAttributes={pictureAttributes}
    style={style}
/>
