---
import type { HTMLAttributes } from 'astro/types'
import type { ImageMetadata, ImageInputFormat } from 'astro'
import type { SpecificHashOptionsMap } from '@/types/utils/hash/hash'
import type { DataUrlFormats, RgbaToDataUrlOptions } from '@/types/utils/hash/rgbaToDataUrl'

import { getHashDataUrl } from './hash'
import { getImage } from '../getImage'
import { Picture } from 'astro:assets'

interface Props {
    src: string | ImageMetadata
    method?: 'blurhash' | 'thumbhash'
    adjustedDimension?: number
    saturation?: number
    hashFormat?: DataUrlFormats
    methodOptions?: SpecificHashOptionsMap
    outputOptions?: RgbaToDataUrlOptions['outputOptions']
    width?: number
    height?: number
    widths?: number[]
    sizes?: string
    alt: string
    decoding?: HTMLAttributes<'img'>['decoding']
    loading?: HTMLAttributes<'img'>['loading']
    formats?: ImageInputFormat[]
    fallbackFormat?: ImageInputFormat
    class?: HTMLAttributes<'picture'>['class']
    pictureAttributes?: HTMLAttributes<'picture'>
    deriveAspectRatio?: boolean
}

const {
    src: baseSrc,
    method,
    adjustedDimension,
    saturation,
    hashFormat,
    methodOptions,
    outputOptions,
    widths = [900, 1400, 2000],
    decoding = 'async',
    formats = ['avif'],
    fallbackFormat = 'webp',
    deriveAspectRatio = true,
    ...props
} = Astro.props

const image = typeof baseSrc === 'string' ? await getImage(baseSrc) : baseSrc

const base64DataUrl = await getHashDataUrl({
    src: image.src,
    adjustedDimension,
    saturation,
    method,
    format: hashFormat,
    outputOptions,
    methodOptions,
})

const aspectRatioStyle = `aspect-ratio: ${image.width / image.height};`
const backgroundStyle = `background: center / cover url(${base64DataUrl});`
const style = deriveAspectRatio ? `${aspectRatioStyle} ${backgroundStyle}` : backgroundStyle
---

<Picture
    src={image}
    widths={widths}
    decoding={decoding}
    formats={formats}
    fallbackFormat={fallbackFormat}
    style={style}
    {...props}
/>
